name: Build and Deploy Pages

on:
  push:
    paths:
      - 'data/**'
      - 'templates/**'
      - 'backendScripts/**'
      - 'assets/**'
      - 'locales/**'
  workflow_dispatch:
  workflow_run:
    workflows: ["Update Static Data"]
    types:
      - completed
concurrency:
      group: "pages"
      cancel-in-progress: true  
# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: write
  pages: write
  id-token: write
jobs:
  buildPages:
    runs-on: ubuntu-latest
    steps:
      - name: Clone project
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
          ref: main 

      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install jinja2 polib

      - name: Generate index HTML page
        run: |
          python backendScripts/generateIndexPage.py
      
      - name: Generate portfolio details HTML page
        run: |
          python backendScripts/generatePortfolioDetailsPage.py

      - name: Generate final project details HTML page
        run: |
          python backendScripts/generateFinalProjectDetailsPage.py

      - name: Generate Course Details HTML page
        run: |
          python backendScripts/generateCourseDetailsPage.py

      - name: Generate Basic Pages
        run: |
          python backendScripts/generateBasicPages.py

      - name: Commit and push pages
        run: |
          set -e  # Exit script on any command failure
      
          git config --global user.name "github-actions"
          git config --global user.email "github-actions@github.com"
          git config pull.rebase true  # Rebase

          git add .

          # Commit only if there are changes
          if git diff --cached --quiet; then
            echo "No changes to commit"
          else
            git commit -m "Updated Spec Pages"
          fi
      
          # Pull latest changes, fail only on actual errors
          if ! git fetch --depth=1 origin main; then
            echo "Error during shallow fetch" >&2
            exit 1
          fi

          if ! git rebase origin/main; then
            echo "Error during rebase" >&2
            exit 1
          fi

          if ! git push; then
            echo "Error during git push" >&2
            exit 1
          fi


  buildArtiface:

    # we can run our steps on pretty much anything, but the "ubuntu-latest" image is a safe bet
    runs-on: windows-latest
    needs: buildPages
    # specify the environment variables used by the packager, matching the secrets from the project on GitHub
    env:
      GH_TOKEN: ${{ secrets.WORKFLOW_TOKEN }}
    # "steps" holds a list of all the steps needed to package and release our AddOn
    
    steps:

      # we first have to clone the project, this is a required step
      - name: Clone project
        uses: actions/checkout@v4
        with:
          fetch-depth: 1  # Fetch all history for all branches and tags
          ref: main 
          sparse-checkout: |
            assets
            courses
            embeds
            en_US
            portfolio
            projects
      
      - name: Upload static files as artifact
        id: deployment
        uses: actions/upload-pages-artifact@v3 # or specific "vX.X.X" version tag for this action
        with:
          path: '.'

  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: buildArtiface
    steps:
      
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
